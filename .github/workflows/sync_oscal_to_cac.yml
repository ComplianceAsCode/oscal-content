name: Sync CaC content to OSCAL
on:
  pull_request:
    types: [opened, synchronize, reopened]
  #workflow_dispatch:
  # The final version should execute the test whenever a PR is merged to master.
  #pull_request:
  #  types:
  #    - closed
  #  branches:
  #    - master

jobs:
  check-pr-message:
    runs-on: ubuntu-latest
    outputs:
      run_job_check_update: ${{ steps.check_pr.outputs.run_job_check_update }}
    steps:
    - name: Check if the PR comes from the sync of cac content
      id: check_pr
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        if [[ "$PR_TITLE" == *"Auto-generated PR from CAC"* ]]; then
          echo "The PR comes from CAC content. The task of Sync OSCAL content to CAC will exit."
          echo "Skipping further checks."
          exit 0
        else
          echo "::set-output name=run_job_check_update::true"
        fi
  
  check-oscal-content-update-sync-to_cac:
    runs-on: ubuntu-latest
    needs: check-pr-message
    if: ${{ needs.check-pr-message.outputs.run_job_check_update == 'true' }}
    steps:
      # Step 1: Set up Python 3
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      # Step 2: Install Git and Ruby
      - name: Install Git and Ruby
        run: sudo apt-get update && sudo apt-get install -y git ruby
      # Step 3: Checkout OSCAL repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Step 4: Get the access token for access token to detect changes
      - name: Generate JWT Token
        id: generate-jwt
        run: |
          # Generate JWT using Ruby
          JWT=$(ruby -r jwt -e '
            payload = {
              iat: Time.now.to_i,
              exp: Time.now.to_i + (10 * 60), # Expires in 10 mins
              iss: ENV["APP_ID"]
            }
            private_key = OpenSSL::PKey::RSA.new(ENV["PRIVATE_KEY"])
            token = JWT.encode(payload, private_key, "RS256")
            puts token
          ')
          echo "JWT_TOKEN=$JWT" >> $GITHUB_ENV
          echo "::add-mask::$JWT" # Mask the token in logs
        env:
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      #Step 5: Generate the GitHub app installation access token which expires in 1 hour
      - name: Get Installation Access Token
        id: get-installation-token
        run: |
          INSTALLATION_TOKEN=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations/${{ secrets.INSTALLATION_ID }}/access_tokens \
            | jq -r '.token')
          echo "INSTALLATION_TOKEN=$INSTALLATION_TOKEN" >> $GITHUB_ENV
          echo "::add-mask::$INSTALLATION_TOKEN" # Mask the token in logs
      # Step 6: Dectect the updates of OSCAL content
      - name: Detect the changed files of the PR
        id: changed-files
        run: |
          pr_number="${{ github.event.pull_request.number }}"
          response=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ env.INSTALLATION_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/files)
          echo "$response" | jq -r '.[].filename' > filenames.txt
          echo "OUTPUT_SIZE=$(stat --printf="%s" filenames.txt)" >> $GITHUB_OUTPUT
      # Step 7: Setup the trestle-bot CLI run envrionment
      - name: Checkout OSCAL repo
        if: ${{ steps.changed-files.outputs.OUTPUT_SIZE != '0' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: oscal-content
      - name: Checkout CAC repo
        if: ${{ steps.changed-files.outputs.OUTPUT_SIZE != '0' }}
        uses: actions/checkout@v4
        with:
          repository: complytime/cac-content
          path: cac-content
      - name: Checkout trestle-bot repo
        if: ${{ steps.changed-files.outputs.OUTPUT_SIZE != '0' }}
        uses: actions/checkout@v4
        with:
          repository: complytime/trestle-bot
          path: trestle-bot
      - name: Setup trestlebot
        if: ${{ steps.changed-files.outputs.OUTPUT_SIZE != '0' }}
        run: |
          cd trestle-bot && python3 -m venv venv && source venv/bin/activate
          python3 -m pip install --no-cache-dir "poetry==1.7.1"
          poetry install
      # Step 8: Sync OSCAL content to CAC content
      - name: Sync OSCAL content to CAC content
        if: ${{ steps.changed-files.outputs.OUTPUT_SIZE != '0' }}
        run: |
          pr_number="${{ github.event.pull_request.number }}"
          cat filenames.txt
          cd trestle-bot && source venv/bin/activate
          while IFS= read -r line; do
            if [[ "$line" == *catalogs* ]]; then
              policy_id=$(echo "$line" | cut -f2 -d"/")
              echo "sync oscal catalogs according to update of $line"
            elif [[ "$line" == "profiles"* ]]; then
              policy_id=$(echo $line | cut -f2 -d"/" | cut -f2 -d"-")
              product=$(echo "$line" | cut -f2 -d"/" | cut -f1 -d"-")
              echo "sync oscal profiles according to update of $line"
              #poetry run trestlebot sync-oscal-content profile --repo-path oscal-content --committer-email test@redhat.com --committer-name test --branch sync_oscal_pr$pr_name --cac-content-root ../cac-content --cac-policy-id $policy_id --product product 
            elif [[ "$line" == "component-definitions"* ]]; then
              product=$(echo "$line" | cut -f2 -d"/")
              profile=$(echo "$line" | cut -f3 -d"/" | cut -f2 -d"-")
              echo "sync oscal component-definitions according to update of $line"
              #poetry run trestlebot sync-oscal-content component-definition --repo-path oscal-content --committer-email test@redhat.com --committer-name test --branch sync_oscal_pr$pr_name --cac-content-root ../cac-content --product $product --oscal-profile $profile
            fi
          done < ../filenames.txt
      # Step 9: Create PR to CAC content
      - name: Create a Pull Request to OSCAL content
        if: ${{ steps.ctf.outputs.CTF_OUTPUT_SIZE != '0' }}
        run: |
          cd oscal-content
          # Use GitHub's REST API to create a pull request
          pr_number="${{ github.event.pull_request.number }}"
          BRANCH_NAME="sync_oscal_pr$pr_number"
          # Check if the PR exists
          PR_EXISTS=$(curl -s \
          -H "Authorization: token ${{ env.INSTALLATION_TOKEN }}" \
          "https://api.github.com/repos/complytime/cac-content/pulls?head=complytime:$BRANCH_NAME&state=open" | jq length)
          # If the PR doesn't exist, create PR
          if [ "$PR_EXISTS" -gt 0 ]; then
            echo "PR $BRANCH_NAME already exists. Skipping PR creation."
          else
            echo "Creating PR for new branch: $BRANCH_NAME"
            PR_RESPONSE=$(curl -s -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ env.INSTALLATION_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/complytime/oscal-content/pulls \
              -d "{
                \"title\": \"Auto-generated PR from OSCAL content $pr_number\",
                \"head\": \"$BRANCH_NAME\",
                \"base\": \"main\",
                \"body\": \"This is an auto-generated PR from OSCAL $pr_number updates \"
              }")
            # Extract the PR URL from the response
            PR_URL=$(echo $PR_RESPONSE | jq -r '.html_url')
            echo "Pull Request created: $PR_URL"
          fi
